#!/bin/bash

cmd="$(basename $0)"

FUNC="pci_epf_char.0"
debug_epf=0
debug_pci=0

function exit_failed()
{
	echo "$1"
	exit 1
}

function usage()
{
	echo "Usage:"
	echo "    ${cmd} [-h | --help]"
	echo "    ${cmd} [start options] start"
	echo "    ${cmd} stop"
	echo "Start options:"
	echo "  --debug-epf: Turn on test epf kernel debug messages"
	echo "  --debug-pci: Turn on pci controller kernel debug messages"
	echo "  -d | --debug: Turn on test epf and pci controller kernel debug messages"
}

# Check options
while [ "${1#-}" != "$1" ]; do
	case "$1" in
	-h | --help)
		usage
		exit 0
		;;
	--debug-epf)
		debug_epf=1
		shift
		;;
	--debug-pci)
		debug_pci=1
		shift
		;;
	-d | --debug)
		debug_epf=1
		debug_pci=1
		shift
		;;
	-*)
		echo "Unknow option $1"
		exit 1
		;;
	esac
done

if [ "$1" == "" ]; then
	usage
	exit 1
fi

action="$1"

function char_epf_start()
{
	# Check controller
	cd /sys/kernel/config/pci_ep || \
		exit_failed "Missing PCI-EP"

	controller="$(find controllers -name "*pcie*")"
	if [ -z "${controller}" ]; then
		exit_failed "PCI EP Controller not found"
	fi

	# Load modules
	echo "Loading pci-epf-char"
	modprobe pci-epf-char || \
		exit_failed "Load pci-epf-char failed"

	# Enable pr_debug
	if [ "${debug_epf}" == "1" ]; then
		echo 8 > "/proc/sys/kernel/printk"
		echo -n 'module pci_epf_char +p;' > \
			"/sys/kernel/debug/dynamic_debug/control"
	fi

	if [ "${debug_pci}" == "1" ]; then
		echo 8 > "/proc/sys/kernel/printk"
		echo -n 'file drivers/pci/controller/dwc/pcie-dw-rockchip.c +p;' > \
                        "/sys/kernel/debug/dynamic_debug/control"
                echo -n 'file drivers/pci/controller/dwc/pcie-designware.c +p;' > \
                        "/sys/kernel/debug/dynamic_debug/control"
                echo -n 'file drivers/pci/controller/dwc/pcie-designware-ep.c +p;' > \
                        "/sys/kernel/debug/dynamic_debug/control"
	fi

	# Setup the char endpoint function
	echo "Creating char endpoint ${FUNC}"
	mkdir "functions/pci_epf_char/${FUNC}" || \
		exit_failed "Create function 0 failed"

	echo 0x104c > "functions/pci_epf_char/${FUNC}/vendorid" || \
		exit_failed "Set vendorid failed"
	echo 0xb500 > "functions/pci_epf_char/${FUNC}/deviceid" || \
		exit_failed "Set deviceid failed"
	echo 16 > "functions/pci_epf_char/${FUNC}/msi_interrupts" || \
		exit_failed "Set msi_interrupts failed"
	echo 16 > "functions/pci_epf_char/${FUNC}/msix_interrupts" || \
		exit_failed "Set msix_interrupts failed"

	echo "Attach char endpoint ${FUNC} to EP controller ${controller}"
	ln -s "functions/pci_epf_char/${FUNC}" "${controller}/" || \
		exit_failed "Attach ${FUNC} to EP controller failed"

	echo "Starting PCI EP controller"
	echo 1 > "${controller}/start" || \
		exit_failed "Start PCI EP controller failed"
}

function char_epf_stop()
{
	# Check controller
	cd /sys/kernel/config/pci_ep || \
		exit_failed "Missing PCI-EP"

	controller="$(find controllers -name "*pcie*")"
	if [ -z "${controller}" ]; then
		exit_failed "PCI EP Controller not found"
	fi

	# Teardown the char endpoint function
	echo "Stopping PCI EP controller"
	echo 0 > "${controller}/start" || \
		exit_failed "Stop PCI EP controller failed"

	echo "Detach char endpoint ${FUNC} from EP controller ${controller}"
	rm "${controller}/${FUNC}" || \
		exit_failed "Detach ${FUNC} from EP controller failed"

	echo "Destroying char endpoint ${FUNC}"
	rmdir "functions/pci_epf_char/${FUNC}" || \
		exit_failed "Remove function 0 failed"

	rmmod pci-epf-char
}

case "${action}" in
start)
	char_epf_start
	;;
stop)
	char_epf_stop
	;;
*)
	echo "Unknow action ${action}"
	exit 1
	;;
esac

